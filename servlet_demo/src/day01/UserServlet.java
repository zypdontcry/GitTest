package day01;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import entity.User;
import util.ReadPropertiesUtil;

/**
 * http://localhost:8080/servlet_demo1/register.jsp  ---> WebRoot下面
 * http://localhost:8080/servlet_demo1/user/regist   ---> WEB-INF下面
 * http://127.0.0.1:8080/servlet_demo1/user/regist
 * http://localhost:8080/servlet_demo1/user/login
 * 
 * @author zte
 *
 */
public class UserServlet extends HttpServlet
{
	private static final long serialVersionUID = 1L;
	

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException 
	{
		// 当用户发送http://localhost:8080/servlet_demo1/user/regist此请求转发到 WEB-INF/pages/register.jsp页面
		request.getRequestDispatcher("/WEB-INF/pages/register.jsp").forward(request, response);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException 
	{
		String requestURI = request.getRequestURI();
		// System.out.println("requestURI:" + requestURI);
		
		/*
		 requestURI:/servlet_demo1/user/regist
		 requestURI:/servlet_demo1/user/login
		 */
		
		String path = requestURI.substring(requestURI.lastIndexOf("/"));
		// System.out.println("requestURI:" + path);
		
		if ("/regist".equals(path))
		{
			// 调用注册方法
			registUser(request, response);
		}else if("/login".equals(path))
		{
			// 调用登录方法
			loginUser(request, response);
		}
	}

	/**
	 * 用户登录
	 */
	public void loginUser(HttpServletRequest request,HttpServletResponse response) throws UnsupportedEncodingException 
	{
	   
		
	}
	
	
	/**
	 * 用户注册(返回主键)
	 */
/*	public void registUser(HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException
	{
	    
	    request.setCharacterEncoding("utf-8");
	    response.setContentType("text/html;charset=utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    
		// 后台接收前台传递过来的参数
		final String username = request.getParameter("username");
		final String password = request.getParameter("password");
		
		final User user = new User();
       
        
        Map<String,String> readProps = ReadPropertiesUtil.readProps();
        
        // 数据源配置
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName((String)readProps.get("driverClassName"));
        dataSource.setUrl((String)readProps.get("url"));
        dataSource.setUsername((String)readProps.get("username"));
        dataSource.setPassword((String)readProps.get("password"));
       
        *//**
         * 用户注册(返回主键)
         *//*
        // GeneratedKeyHolder implements KeyHolder
        KeyHolder holder = new GeneratedKeyHolder();
		// new JdbcTemplate(dataSource).update(psc, generatedKeyHolder);  // generatedKeyHolder保存时返回主键
        new JdbcTemplate(dataSource).update(new PreparedStatementCreator()
        {
			@Override
			public PreparedStatement createPreparedStatement(Connection con)throws SQLException 
			{
				String sql = new StringBuffer()
					                .append(" insert into ")
					                .append("   t_user(username, password) ")
					                .append(" values(?, ?) ")
					                .toString();
				
			        
		         user.setUsername(username);
		         user.setPassword(password);
			        
				// 语法
				// con.prepareStatement(sql, autoGeneratedKeys);
				// PreparedStatement.RETURN_GENERATED_KEYS:返回主键
				PreparedStatement ps = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
				ps.setString(1, user.getUsername());
				ps.setString(2, user.getPassword());
				
				return ps;
			}
        	
        }, holder);
        
        Number key = holder.getKey();
        user.setId(key.intValue());  // 把主键保存起来
        System.out.println("主键值:" + key.intValue());
	}*/

	/**
	 * 注册方法
	 */
	public void registUser(HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException
	{
		
		 // 后台接收前台传递过来的参数
		 String username = request.getParameter("username");
		 String password = request.getParameter("password");
		
		 String sql = new StringBuffer()
		                   .append(" insert into ")
		                   .append("   t_user(username, password) ")
		                   .append(" values(?, ?) ")
		                   .toString();
         User user = new User();
         
         user.setUsername(username);
         user.setPassword(password);
        
         
         Map<String,String> readProps = ReadPropertiesUtil.readProps();
         
         // 数据源配置
         DriverManagerDataSource dataSource = new DriverManagerDataSource();
         dataSource.setDriverClassName((String)readProps.get("driverClassName"));
         dataSource.setUrl((String)readProps.get("url"));
         dataSource.setUsername((String)readProps.get("username"));
         dataSource.setPassword((String)readProps.get("password"));
	     
         // Spring提供的 JdbcTemplate 
	     JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
	     
	     
	     try 
	     {
			 jdbcTemplate.update(sql, user.getUsername(), user.getPassword());
			 
			 // 注册成功之后要转发
			 request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request, response);
		 } catch (DataAccessException e) 
		 {
			 // TODO 注册失败失败的原因 --> 写到regist.jsp页面中(告诉给用户)
			 e.printStackTrace();
			 
			 // 设置属性 ---> 注册失败失败的原因 --> 写到regist.jsp页面中(告诉给用户)
			 request.setAttribute("errorMsg", "注册失败:" + e.getMessage());
			 request.getRequestDispatcher("/WEB-INF/pages/register.jsp").forward(request, response);
		 } catch (Exception e) 
		 {
			 // TODO 注册失败失败的原因 --> 写到regist.jsp页面中(告诉给用户)
			 e.printStackTrace();
			 
			 // 设置属性 ---> 注册失败失败的原因 --> 写到regist.jsp页面中(告诉给用户) EL表达式(前提:isELIgnored="false" 使用EL表达式的意思) :  ${errorMsg}
			 request.setAttribute("errorMsg", "注册失败:" + e.getMessage());
			 request.getRequestDispatcher("/WEB-INF/pages/register.jsp").forward(request, response);
		 }
		 
	}
	
   
}
